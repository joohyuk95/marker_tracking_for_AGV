#!/usr/bin/env python
#-*- coding: utf-8 -*-

import rospy
from ar_track_alvar_msgs.msg import AlvarMarkers
from turtlesim.msg import Pose
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
from tf.transformations import euler_from_quaternion
from math import degrees, radians, pi, cos, sin, asin, sqrt

#MAX_LIN_SPEED = 0.22
#MAX_ANG_SPEED = 2.84
#LIN_SPD = MAX_LIN_SPEED * 0.5
#ANG_SPD = MAX_ANG_SPEED * 0.2

OFFSET = 0.1        # 0.25
CAM_ARM = 0.048
X_TOLERANCE = 0.02
ROT_CONST = 0.9
DIST_CONST = 10 / 7 # 3.4

#LIM_NEAR = 0.1      # 0.14
LIM_ROT = 0.2
LIM_TARGET_POINT = 0.3
LIM_GRAB_POINT = 0.2


class Followers:
    def __init__(self):
        self.target_id = -1
        self.mission_step = 1
        self.tb_id = rospy.get_param('/tb_id')

        self.parameter = False
        self.param_name = '/'+self.tb_id+'/mission_start'
        
        rospy.Subscriber('/ar_pose_marker', AlvarMarkers, self.cbGetMarker, queue_size = 1)
        rospy.Subscriber('/tb3pose', Pose, self.cbGetPose, queue_size = 1)
        rospy.Subscriber('/scan', LaserScan, self.cbScan, queue_size = 1)

        self.pub = rospy.Publisher('/cmd_vel', Twist, queue_size = 1)

        self.distance = 0
        self.angle = 0

        self.z = 0
        self.center = 0

        self.marker_data = AlvarMarkers()
        self.tw = Twist()
        self.tw2 = Twist()
        self.theta = 0

        self.tb3pose = self.org = Pose()

        self.relative_angle = 0
        self.min_range = 0

        self.is_center_aligned = False
        self.is_moving = False
        self.is_straight_end = False
        self.is_rotate_end = True
        self.is_1st_look = True
        self.is_1st_back = True
        self.is_1st_turn = True
        self.is_1st_stop = True
        self.is_1st_complete = True
        self.is_find = False
        self.is_find_marker = False
        self.is_initiated = False

        self.LIM_NEAR = 0.14
        self.MAX_LIN_SPEED = 0.22
        self.MAX_ANG_SPEED = 2.84
        self.LIN_SPD = self.MAX_LIN_SPEED * 0.5
        self.ANG_SPD = self.MAX_ANG_SPEED * 0.2

        loop_rate = rospy.Rate(10) # 10hz
        while not rospy.is_shutdown():
            self.markerTracking()

            loop_rate.sleep()

        rospy.on_shutdown(self.stop)

    def cbGetMarker(self, msg):
        if len(msg.markers) > 0:
            self.is_find_marker = True
            for msg in msg.markers:
                if msg.id == self.target_id:
                    self.marker_data = msg
                    self.is_target_id = True
                else:
                    self.is_target_id = False

        else:
            self.is_find_marker = False

    def markerTracking(self):
        self.initStep()
        if self.parameter == False:
            if self.mission_step != 5:
                if self.is_find_marker == True:
                    if self.is_target_id == True:
                        self.is_find = True
                        if self.is_center_aligned == False and self.is_moving == False:
                            self.move2marker()
                    else:
                        if self.is_find == True:
                            self.is_target_id = True
                        else:
                            self.findTarget("ID miss match")
                else:
                    if self.is_find == True:
                        self.stop()
                        if self.mission_step == 1 or self.mission_step == 4:
                            print("lost foward turtlebot")
                            if self.is_rotate_end == True and abs(degrees(self.relative_angle)) > 5:
                                self.rotate(self.relative_angle)
                    else:
                        if self.mission_step == 3:
                            if self.is_1st_back == True:
                                self.is_1st_back = False
                                self.straight(-0.1)
                        else:
                            self.findTarget("No marker")
            else:
                pass
        else:
            self.stop()
            self.is_find = False
            if self.mission_step == 1:
                self.mission_step = 2
                self.is_1st_stop = True
                print("step changed to [work space]")
            elif self.mission_step == 2:
                self.mission_step = 3
                print("step changed to [rally point]")
            elif self.mission_step == 3:
                self.mission_step = 4
                print("step changed to [track marker]")
                if self.is_1st_turn == True:
                    self.is_1st_turn = False
                    self.getMarkerInfo()
                    if self.tb_id == 'tb3':
                        self.rotate(radians(90) - self.theta)
                        if self.is_rotate_end == True:
                            self.initMarkerInfo()
                            self.straight(0.4)
                    else:
                        self.rotate(-(radians(70) + self.theta))
                        if self.is_rotate_end == True:
                            self.initMarkerInfo()
                            self.straight(0.2)
            elif self.mission_step == 4:
                self.mission_step = 5
                print("wait for tb1 parking finished")
            elif self.mission_step == 5:
                self.mission_step = 6
                print("step changed to [parking]")
            elif self.mission_step == 6:
                if self.is_1st_complete == True:
                    self.is_1st_complete = False
                    rospy.sleep(1)
                    self.straight(-0.05)
                    self.getMarkerInfo()
                    self.rotate(-(radians(90) + self.theta))
                    print("mission complete")
                    if self.tb_id == 'tb3':
                        rospy.set_param('/tb2/parking_start', True)
            
            if self.is_1st_complete == True:
                self.is_initiated = False

    def initStep(self):
        if self.is_initiated == False:
            print("init step")
            self.is_initiated = True
            if self.tb_id == 'tb2':
                if self.mission_step == 1:
                    self.param_name = '/tb2/mission_start'
                    self.target_id = 15
                elif self.mission_step == 2:
                    self.param_name = '/tb2/mission_finished'
                    self.target_id = 7
                elif self.mission_step == 3:
                    self.param_name = '/tb2/rally_start'
                    self.target_id = 6
                elif self.mission_step == 4:
                    self.param_name = '/tb2/rally_finished'
                    self.target_id = 1
                elif self.mission_step == 5:
                    self.param_name = '/tb2/parking_start'
                elif self.mission_step == 6:
                    self.param_name = '/tb2/parking_finished'
                    self.target_id = 17

            else:   # self.tb_id = 'tb3'
                if self.mission_step == 1:
                    self.param_name = '/tb3/mission_start'
                    self.target_id = 10   #10
                elif self.mission_step == 2:
                    self.param_name = '/tb3/mission_finished'
                    self.target_id = 5   #5
                elif self.mission_step == 3:
                    self.param_name = '/tb3/rally_start'
                    self.target_id = 6
                elif self.mission_step == 4:
                    self.param_name = '/tb3/rally_finished'
                    self.target_id = 15  #16
                elif self.mission_step == 5:
                    self.param_name = '/tb3/parking_start'
                elif self.mission_step == 6:
                    self.param_name = '/tb3/parking_finished'
                    self.target_id = 16
            rospy.sleep(1)              # wait for initialization complete
            print("Target ID : {}".format(self.target_id))
        else:
            pass

        self.parameter = rospy.get_param(self.param_name)
        
    def move2marker(self):
        self.alignCenter()

        if self.is_center_aligned == True:
            self.is_moving = True
            self.is_center_aligned = False
            self.getMarkerInfo()

            if (self.z > LIM_ROT and abs(self.theta) > pi / 6) or (self.mission_step == 6 and self.z > 0.4):
                self.carrotCoordinate()
            else:
                self.straight2marker()
            self.is_moving = False

    def alignCenter(self):
        msg = self.marker_data
        center = msg.pose.pose.position.x
        if self.mission_step == 1 or self.mission_step == 4:
            ANG_SPD = self.ANG_SPD
        else:
            ANG_SPD = 0.2

        if center > X_TOLERANCE:
            self.tw.angular.z = -ANG_SPD
        elif center < -X_TOLERANCE:
            self.tw.angular.z = ANG_SPD
        else:
            self.tw.angular.z = 0
        self.pub.publish(self.tw)
        
        if self.tw.angular.z == 0:
            self.is_center_aligned = True

    def straight2marker(self):
        step = self.mission_step
        if step == 1 or step == 4:
            self.LIM_NEAR = 0.12
            if self.z > self.LIM_NEAR:
                if self.is_1st_stop == False:
                    self.tw.linear.x = 0.7 * self.z + 0.01
                else:
                    self.tw.linear.x = 0.1
            else:
                self.tw.linear.x = 0
                if self.is_1st_stop == True:
                    self.is_1st_stop = False
                    if (step == 1 and self.tb_id == 'tb3') or (step == 4 and self.tb_id == 'tb2'):
                        rospy.set_param('/'+self.tb_id+'/aligned', True)
                        print("align complete")
            self.pub.publish(self.tw)

        elif step == 2:
            self.LIM_NEAR = 0.14
            if self.z > self.LIM_NEAR:
                self.tw.linear.x = 0.1
            else:
                if self.min_range < LIM_TARGET_POINT and self.min_range != 0:
                    self.stop()
                    rospy.set_param('/'+self.tb_id+'/mission', True)
                    self.tw.linear.x = 0.05; self.pub.publish(self.tw)
                    while self.min_range > LIM_GRAB_POINT:    pass
                    print "=============== arrival ==============="
                elif self.min_range > LIM_TARGET_POINT or self.min_range == 0:
                    print(round(self.min_range, 4))
                    self.tw.linear.x = 0.1
            self.pub.publish(self.tw)
        
        elif step == 3 or step == 6:
            if step == 3:
                self.LIM_NEAR = 0.13
                LIN_SPD = self.LIN_SPD
            else:
                self.LIM_NEAR = 0.08
                LIN_SPD = self.LIN_SPD * 0.5
            if self.z > self.LIM_NEAR:
                self.tw.linear.x = LIN_SPD
            else:
                if self.min_range < LIM_TARGET_POINT and self.min_range != 0:
                    self.tw.linear.x = 0
                    if step == 3:
                        rospy.set_param('/'+self.tb_id+'/rally_start', True)
                    else:
                        rospy.set_param('/'+self.tb_id+'/parking_finished', True)
                else:
                    self.tw.linear.x = 0.1
            
            self.pub.publish(self.tw)

    def findTarget(self, why):
        print("find target ["+why+"]")
        self.tw.linear.x = 0
        if self.mission_step == 2:
            self.tw.angular.z = -self.ANG_SPD
        else:
            self.tw.angular.z = self.ANG_SPD
        self.pub.publish(self.tw)

    def getMarkerInfo(self):
        msg = self.marker_data
        q = (msg.pose.pose.orientation.x, msg.pose.pose.orientation.y, msg.pose.pose.orientation.z, msg.pose.pose.orientation.w)
        quart = euler_from_quaternion(q)
        
        self.theta = quart[1]                        # range from (-3.14, 3.14) 
        self.z = DIST_CONST * msg.pose.pose.position.z
        self.center = msg.pose.pose.position.x

    def initMarkerInfo(self):
        self.theta = 0
        self.z = 0
        self.center = 0

    def carrotCoordinate(self):
        print("calculate")
        self.distance = sqrt(OFFSET**2 + (self.z+CAM_ARM)**2 - (2*OFFSET*(self.z+CAM_ARM)*cos(self.theta)))
        if self.theta > 0:
            self.angle = asin(OFFSET/self.distance*sin(abs(self.theta)))
        else:
            self.angle = -asin(OFFSET/self.distance*sin(abs(self.theta)))
        
        if self.mission_step == 6:
            self.parking()
        else:
            self.rotate(self.angle)
            if self.is_rotate_end == True:
                self.straight(self.distance)
                if self.is_straight_end == True:
                    self.rotate(-(self.theta + self.angle))
            self.initMarkerInfo()            
    
    def parking(self):
        if (self.z + CAM_ARM) * cos(self.theta) > 0.2:
            self.straight(self.z+CAM_ARM - (0.2/cos(self.theta)))
            if self.is_straight_end == True:
                self.getMarkerInfo()
                self.rotate(-0.8*(0.5*pi + self.theta))
                if self.is_rotate_end == True:
                    self.straight((1.3*self.z+CAM_ARM)*sin(-self.theta))
                    if self.is_straight_end == True:
                        self.rotate(radians(90))
        else:
            self.rotate(-0.8*(0.5*pi + self.theta))
            if self.is_rotate_end == True:
                self.straight((1.3*self.z+CAM_ARM)*sin(-self.theta))
                if self.is_straight_end == True:
                    self.rotate(radians(90))
        self.initMarkerInfo()

    def cbGetPose(self, msg):
        self.tb3pose = msg
        
    def updateOrg(self):
        while self.tb3pose.x == 0.0 or self.tb3pose.y == 0.0: pass
        
        self.org = self.tb3pose

    def elapsedDist(self):
        return sqrt(pow((self.tb3pose.x - self.org.x), 2) + pow((self.tb3pose.y - self.org.y), 2))

    def straight(self, distance):
        self.is_straight_end = False
        
        self.updateOrg()    
        print("\ndistance: {} cm".format(round(distance*100, 2)))
        
        if self.mission_step == 6:
            LIN_SPD = self.LIN_SPD * 0.5
        else:
            LIN_SPD = self.LIN_SPD

        if distance >= 0:       
            self.tw2.linear.x = LIN_SPD
        else:
            self.tw2.linear.x = -LIN_SPD

        self.pub.publish(self.tw2)
        while self.elapsedDist() < abs(distance):  pass
        
        self.tw2.linear.x = 0;    self.pub.publish(self.tw2)
        self.is_straight_end = True

    def elapsedAngle(self):
        return abs(self.tb3pose.theta - self.org.theta)

    def rotate(self, angle):
        self.is_rotate_end = False
        print("rotate, {} deg".format(round(degrees(angle), 1)))

        self.updateOrg()
        
        if angle >= 0:
            self.tw2.angular.z =  self.ANG_SPD
        else:
            self.tw2.angular.z = -self.ANG_SPD

        self.pub.publish(self.tw2)
        while self.elapsedAngle() < ROT_CONST * abs(angle):    pass

        self.tw2.angular.z =  0;  self.pub.publish(self.tw2)
        self.is_rotate_end = True

    def stop(self):
        self.tw.linear.x = 0
        self.tw.linear.y = 0
        self.tw.linear.z = 0
        self.tw.angular.x = 0
        self.tw.angular.y = 0        
        self.tw.angular.z = 0
        self.pub.publish(self.tw)

    def cbScan(self, msg):
        angle = 0
        t1 = msg.ranges

        min_range = min(i for i in t1 if i > 0)
        min_index = t1.index(min_range)

        if  110 < min_index < 250:
            pass
        else:
            if min_index < 110:
                angle = min_index
                if min_index < 80:
                    self.min_range = min_range
            else:
                angle = min_index - 360
                if min_index > 280:
                    self.min_range = min_range

        self.relative_angle = radians(angle)

    def main(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('follower', anonymous = True)
    node = Followers()
    node.main()
