#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import numpy as np
from std_msgs.msg import Float64
from geometry_msgs.msg import Twist

class ControlLane():
    def __init__(self):

        self.sub_lane = rospy.Subscriber('/control/lane', Float64, self.cbFollowLane, queue_size = 1)
        self.sub_max_vel = rospy.Subscriber('/control/max_vel', Float64, self.cbGetMaxVel, queue_size = 1)
        self.pub_cmd_vel = rospy.Publisher('/control/cmd_vel', Twist, queue_size = 1)

        self.lastError = 0
        self.MAX_VEL = 0.08

        rospy.on_shutdown(self.fnStop)

    def cbGetMaxVel(self, max_vel_msg):
        self.MAX_VEL = max_vel_msg.data

    def cbFollowLane(self, desired_center):

        if rospy.get_param('/tb3/aligned') and rospy.get_param('/tb1/move_forward'):
        # if rospy.get_param('/tb3/aligned') and rospy.get_param('/tb1/move_forward'):
            center = desired_center.data

            error = center - 500

            Kp = 0.0025
            Kd = 0.007

            angular_z = Kp * error + Kd * (error - self.lastError)
            self.lastError = error
            twist = Twist()
            twist.linear.x = min(self.MAX_VEL * ((1 - abs(error) / 500) ** 2.2), 0.2)
            twist.linear.y = 0
            twist.linear.z = 0
            twist.angular.x = 0
            twist.angular.y = 0
            twist.angular.z = -max(angular_z, -2.0) if angular_z < 0 else -min(angular_z, 2.0)
            self.pub_cmd_vel.publish(twist)

        elif rospy.get_param('/tb1/move_forward') == False:
            if rospy.get_param('/tb1/parking_start') == False:
                print("====Wait====")
                self.fnStop()
                

            elif rospy.get_param('/tb1/parking_start'):
                self.fnStop()
                rospy.sleep(2)
                rospy.set_param('/tb2/rally_finished', True)
                rospy.set_param('/tb3/rally_finished', True)
                print("==Parking Start==")
                self.fnRotate(-1)
                self.fnStraight()
                self.fnRotate(1)
                rospy.set_param('/tb1/parking_start', False)
                rospy.set_param('/tb3/parking_start', True)
            

    def fnStop(self):
        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist) 

    def fnRotate(self, direction): #CW 90
        twist = Twist()
        angular_speed = 30 * 0.0174533
        relative_angle = 90 * 0.0174533
        twist.angular.z = direction * angular_speed
        duration = relative_angle / angular_speed
        time2end = rospy.Time.now() + rospy.Duration(duration)
        self.pub_cmd_vel.publish(twist)
        rospy.sleep(0.001)
        while(rospy.Time.now() < time2end):
            pass
        self.fnStop()

    def fnStraight(self):
        twist = Twist()
        twist.linear.x =  0.1
        duration = 0.2 / 0.1 # distance / speed
        time2end = rospy.Time.now() + rospy.Duration(duration)    
        self.pub_cmd_vel.publish(twist)
        rospy.sleep(0.001)    
        while(rospy.Time.now() < time2end):
            pass          
        self.fnStop()

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('lane_controller')
    node = ControlLane()
    node.main()
